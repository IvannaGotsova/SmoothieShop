// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmoothieShop.Data;

#nullable disable

namespace SmoothieShop.Data.Migrations
{
    [DbContext(typeof(SmoothieShopDbContext))]
    partial class SmoothieShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IngredientSmoothie", b =>
                {
                    b.Property<int>("IngredientsIngredientId")
                        .HasColumnType("int");

                    b.Property<int>("SmoothiesSmoothieId")
                        .HasColumnType("int");

                    b.HasKey("IngredientsIngredientId", "SmoothiesSmoothieId");

                    b.HasIndex("SmoothiesSmoothieId");

                    b.ToTable("IngredientSmoothie");
                });

            modelBuilder.Entity("MenuOrder", b =>
                {
                    b.Property<int>("MenusMenuId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersOrderId")
                        .HasColumnType("int");

                    b.HasKey("MenusMenuId", "OrdersOrderId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("MenuOrder");
                });

            modelBuilder.Entity("MenuSmoothie", b =>
                {
                    b.Property<int>("MenusMenuId")
                        .HasColumnType("int");

                    b.Property<int>("SmoothiesSmoothieId")
                        .HasColumnType("int");

                    b.HasKey("MenusMenuId", "SmoothiesSmoothieId");

                    b.HasIndex("SmoothiesSmoothieId");

                    b.ToTable("MenuSmoothie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderSmoothie", b =>
                {
                    b.Property<int>("OrdersOrderId")
                        .HasColumnType("int");

                    b.Property<int>("SmoothiesSmoothieId")
                        .HasColumnType("int");

                    b.HasKey("OrdersOrderId", "SmoothiesSmoothieId");

                    b.HasIndex("SmoothiesSmoothieId");

                    b.ToTable("OrderSmoothie");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin@admin.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0c1621d-e5af-4a36-a183-da319abbccb8",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@admin.com",
                            NormalizedUserName = "admin@admin.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMH48+D6AllfN8L9oQCwZWVCHfSqbU9/I5+o7CycsJDTFDj9FF/Z67cIj5opJ3MnhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ddb4c08-798d-4e46-83f2-9328aaa91003",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "productUser@product.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9ca09ce-1b5f-48b6-a140-cff5fe16d2fb",
                            Email = "productUser@product.com",
                            EmailConfirmed = false,
                            FirstName = "Stoqn",
                            LastName = "Stoqnov",
                            LockoutEnabled = false,
                            NormalizedEmail = "productUser@product.com",
                            NormalizedUserName = "productUser@product.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJLifgbh2C342b7DXNl+repjwAA0KlSewliA0RSL4zeKnIcCUZy06V4xjl35ULJ5YA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f96d3be5-998a-46ff-a719-b51926f9b37d",
                            TwoFactorEnabled = false,
                            UserName = "productUser@product.com"
                        },
                        new
                        {
                            Id = "customerUser@customer.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e50d5ddf-1d33-4c7f-8105-48806751877d",
                            Email = "customerUser@customer.com",
                            EmailConfirmed = false,
                            FirstName = "Yordan",
                            LastName = "Yordanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "customerUser@customer.com",
                            NormalizedUserName = "customerUser@customer.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFnen7B2VhzL7KKTfKrSDyDibAjCSuKcIhlfT5tijbYk5O/ncz+6ljCJQYJX79HpDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a3656ee-846b-47c8-a97f-2233fe7b01a0",
                            TwoFactorEnabled = false,
                            UserName = "customerUser@customer.com"
                        },
                        new
                        {
                            Id = "guest1@guest.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0b3fbaf-01c4-4eca-8e9d-1a22d62e4a0f",
                            Email = "guest1@guest.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "guest1@guest.com",
                            NormalizedUserName = "guest1@guest.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEG1vleKKMHVk0zakDZ8ht/T1aHm388yikSXIC+i75LQOGXpdYNEBgUrSJYSRuTyJOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63d13704-ac4f-4d99-9f9c-d608460fb805",
                            TwoFactorEnabled = false,
                            UserName = "guest1@guest.com"
                        },
                        new
                        {
                            Id = "guest2@guest.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "801f1274-729b-4c1f-be7b-1434ea65d03c",
                            Email = "guest2@guest.com",
                            EmailConfirmed = false,
                            FirstName = "Dimitar",
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "guest2@guest.com",
                            NormalizedUserName = "guest2@guest.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAxOs3YZ8LW1h6aYeLsGZllwBzJeC808zaoc/PoF4ucAvz41xwv/URdgTiiQAzFFvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84c8866f-853d-48de-a4ed-e999de09f6a5",
                            TwoFactorEnabled = false,
                            UserName = "guest2@guest.com"
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Bulgaria",
                            CustomerUserId = 1,
                            Email = "guest1@guest.com",
                            FirstName = "Petar",
                            LastName = "Petrov",
                            PhoneNumber = "0000000000"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Bulgaria",
                            CustomerUserId = 1,
                            Email = "guest2@guest.com",
                            FirstName = "Dimitar",
                            LastName = "Dimitrov",
                            PhoneNumber = "0000000000"
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.CustomerUser", b =>
                {
                    b.Property<int>("CustomerUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerUserId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("CustomerUsers");

                    b.HasData(
                        new
                        {
                            CustomerUserId = 1,
                            ApplicationUserId = "customerUser@customer.com"
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            FeedbackId = 1,
                            Comment = "That was great smoothie.",
                            CustomerId = 1,
                            Rating = 10
                        },
                        new
                        {
                            FeedbackId = 2,
                            Comment = "That was amazing smoothie.",
                            CustomerId = 2,
                            Rating = 10
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"), 1L, 1);

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<string>("IngredientInfo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            Calories = 105.0,
                            IngredientInfo = "Bananas are berries, not fruits.",
                            IngredientName = "Banana"
                        },
                        new
                        {
                            IngredientId = 2,
                            Calories = 42.0,
                            IngredientInfo = "Kiwis are a type of berry and are related to strawberries and raspberries.",
                            IngredientName = "Kiwi"
                        },
                        new
                        {
                            IngredientId = 3,
                            Calories = 32.0,
                            IngredientInfo = "Strawberries are not actually berries, but rather an accessory fruit.",
                            IngredientName = "Strawberry"
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.IngredientSmoothie", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("SmoothieId")
                        .HasColumnType("int");

                    b.HasKey("IngredientId", "SmoothieId");

                    b.HasIndex("SmoothieId");

                    b.ToTable("IngredientSmoothies");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            SmoothieId = 1
                        },
                        new
                        {
                            IngredientId = 3,
                            SmoothieId = 2
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"), 1L, 1);

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductUserId")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.HasIndex("ProductUserId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            MenuName = "Basic",
                            ProductUserId = 1
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.MenuOrder", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("MenuId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("MenuOrders");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            OrderId = 1
                        },
                        new
                        {
                            MenuId = 1,
                            OrderId = 2
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.MenuSmoothie", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("SmoothieId")
                        .HasColumnType("int");

                    b.HasKey("MenuId", "SmoothieId");

                    b.HasIndex("SmoothieId");

                    b.ToTable("MenuSmoothies");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            SmoothieId = 1
                        },
                        new
                        {
                            MenuId = 1,
                            SmoothieId = 2
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            Date = new DateTime(2023, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 4.50m
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 2,
                            Date = new DateTime(2023, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 5.50m
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.OrderSmoothie", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("SmoothieId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "SmoothieId");

                    b.HasIndex("SmoothieId");

                    b.ToTable("OrderSmoothies");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            SmoothieId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            SmoothieId = 2
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.ProductUser", b =>
                {
                    b.Property<int>("ProductUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductUserId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ProductUsers");

                    b.HasData(
                        new
                        {
                            ProductUserId = 1,
                            ApplicationUserId = "productUser@product.com"
                        });
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Smoothie", b =>
                {
                    b.Property<int>("SmoothieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmoothieId"), 1L, 1);

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("SmoothieName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SmoothieId");

                    b.ToTable("Smoothies");

                    b.HasData(
                        new
                        {
                            SmoothieId = 1,
                            Calories = 210.0,
                            Price = 4.50m,
                            Size = 250.0,
                            SmoothieName = "Banana Smoothie"
                        },
                        new
                        {
                            SmoothieId = 2,
                            Calories = 480.0,
                            Price = 5.50m,
                            Size = 250.0,
                            SmoothieName = "Strawberry Smoothie"
                        });
                });

            modelBuilder.Entity("IngredientSmoothie", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmoothieShop.Data.Data.Entites.Smoothie", null)
                        .WithMany()
                        .HasForeignKey("SmoothiesSmoothieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuOrder", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenusMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmoothieShop.Data.Data.Entites.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuSmoothie", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenusMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmoothieShop.Data.Data.Entites.Smoothie", null)
                        .WithMany()
                        .HasForeignKey("SmoothiesSmoothieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmoothieShop.Data.Data.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderSmoothie", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmoothieShop.Data.Data.Entites.Smoothie", null)
                        .WithMany()
                        .HasForeignKey("SmoothiesSmoothieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Customer", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.CustomerUser", "CustomerUser")
                        .WithMany()
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerUser");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.CustomerUser", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Feedback", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.IngredientSmoothie", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmoothieShop.Data.Data.Entites.Smoothie", "Smoothie")
                        .WithMany()
                        .HasForeignKey("SmoothieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Smoothie");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Menu", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.ProductUser", "ProductUser")
                        .WithMany()
                        .HasForeignKey("ProductUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductUser");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.MenuOrder", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmoothieShop.Data.Data.Entites.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.MenuSmoothie", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmoothieShop.Data.Data.Entites.Smoothie", "Smoothie")
                        .WithMany()
                        .HasForeignKey("SmoothieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Smoothie");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Order", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.OrderSmoothie", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmoothieShop.Data.Data.Entites.Smoothie", "Smoothie")
                        .WithMany()
                        .HasForeignKey("SmoothieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Smoothie");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.ProductUser", b =>
                {
                    b.HasOne("SmoothieShop.Data.Data.Entites.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SmoothieShop.Data.Data.Entites.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
